name: Build borealis demo

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      ssh_ubuntu:
        description: 'SSH connection to Ubuntu'
        required: false
        default: 'false'
jobs:
  build-ios:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build
        run: |
          cmake -B build-ios -G Xcode -DPLATFORM_IOS=ON -DPLATFORM=SIMULATORARM64 -DDEPLOYMENT_TARGET=13.0
          xcodebuild -project build-ios/borealis_demo.xcodeproj -target borealis_demo -configuration Release clean build
      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: borealis-ps4
          path: build/*.pkg

  build-ps4:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build
        run: |
          docker run --rm -v $(pwd):/src/ xfangfang/pacbrew:latest \
            "cmake -B build -DPLATFORM_PS4=ON \
                -DCMAKE_BUILD_TYPE=Release && \
                make -C build -j$(nproc)"
      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: borealis-ps4
          path: build/*.pkg

  build-psv:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build
        run: |
          docker run --rm -v $(pwd):/src/ xfangfang/wiliwili_psv_builder:latest \
            "mv /usr/local/vitasdk/share/gcc-arm-vita-eabi/samples/hello_world/sce_sys /src/psv/ && \
             mkdir -p /src/psv/module/ && cp /usr/local/vitasdk/arm-vita-eabi/suprx/*.suprx /src/psv/module/ && \
             cmake -B build -G Ninja -DPLATFORM_PSV=ON -DUSE_SYSTEM_SDL2=ON -DCMAKE_BUILD_TYPE=Release && \
             cmake --build build"
      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: borealis-psv
          path: build/*.vpk

  build-switch:
    runs-on: ubuntu-latest
    container:
      image: devkitpro/devkita64
    strategy:
      fail-fast: false
      matrix:
        driver: [ glfw_opengl, sdl_opengl, deko3d ]
        include:
          - { driver: glfw_opengl, cmake: "-DUSE_GLFW=ON", ext: "glfw_gl" }
          - { driver: sdl_opengl, cmake: "-DUSE_SDL2=ON", ext: "sdl_gl" }
          - { driver: deko3d, cmake: "-DUSE_DEKO3D=ON", ext: "deko3d" }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DPLATFORM_SWITCH=ON ${{ matrix.cmake }}
          make -C build borealis_demo.nro -j$(nproc)
      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: borealis-switch-${{ matrix.ext }}
          path: build/borealis_demo.nro

  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: nttld/setup-ndk@v1
        id: setup_ndk
        with:
          ndk-version: r22b
          local-cache: true
      - name: Setup
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build pkg-config
      - name: Build
        id: build
        run: |
          ./build_libromfs_generator.sh
          cd android-project && ./gradlew assembleDebug
      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: borealis-android
          path: android-project/app/build/outputs/apk/debug/*.apk

  build-desktop:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, macos]
        arch: [ x86_64, aarch64, x86 ]
        include:
          - { os: windows, libc: "gnu", cmake: "-DUSE_D3D11=ON -DUSE_LIBROMFS=ON -DLIBROMFS_PREBUILT_GENERATOR=/home/runner/work/borealis/borealis/libromfs-generator", ext: ".exe" }
          - { os: linux, libc: "gnu", cmake: "-DX11_X11_LIB=ON -DUSE_LIBROMFS=ON -DLIBROMFS_PREBUILT_GENERATOR=/home/runner/work/borealis/borealis/libromfs-generator" }
          - { os: macos, libc: "none", cmake: "-DBUNDLE_MACOS_APP=ON", os_version: ".11.0", ext: ".app"}
        exclude:
          - { os: macos, arch: x86 }
          - { os: windows, arch: aarch64 }
          - { os: linux, arch: x86 }
          - { os: linux, arch: aarch64 }
      # Don't fail the whole workflow if one architecture fails
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh_ubuntu == 'true' && github.event.inputs.ssh_ubuntu  != 'false') || contains(github.event.action, 'ssh_ubuntu')

      - name: Build libromfs generator
        run: ./build_libromfs_generator.sh

      - name: Install dependencies
        if: ${{ matrix.os == 'linux' }}
        run: |
          sudo apt update -y
          sudo apt remove -y libc6-dev
          sudo apt install -y libdbus-1-dev libxkbcommon-dev \
            libwayland-dev wayland-protocols libx11-dev libxrandr-dev libxinerama-dev \
            libxcursor-dev libxi-dev --no-install-recommends

      - name: Install dependencies
        if: ${{ matrix.os == 'windows' }}
        run: |
          sudo apt update -y
          sudo apt install -y binutils-mingw-w64-x86-64 --no-install-recommends

      - name: Build
        id: build
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release ${{ matrix.cmake }} \
            -DPLATFORM_DESKTOP=ON \
            -DUSE_STD_THREAD=ON \
            -DZIG_TARGET=${{ matrix.arch }}-${{ matrix.os }}${{ matrix.os_version }}-${{ matrix.libc }}
          make -C build -j$(nproc)
          output_dir=borealis-${{ matrix.os }}-${{ matrix.arch }}
          mkdir -p ${output_dir}
          mv build/borealis_demo${{ matrix.ext }} ${output_dir}
          echo "DEMO=${output_dir}" >> $GITHUB_OUTPUT

      - name: package linux
        if: ${{ matrix.os == 'linux' }}
        run: |
          strip ${{ steps.build.outputs.DEMO }}/borealis_demo
          tar -czvf ${{ steps.build.outputs.DEMO }}/borealis_demo.tar.gz ${{ steps.build.outputs.DEMO }}/borealis_demo
          rm ${{ steps.build.outputs.DEMO }}/borealis_demo

      - name: package macos
        if: ${{ matrix.os == 'macos' }}
        run: |
          tar -czvf ${{ steps.build.outputs.DEMO }}/borealis_demo.tar.gz ${{ steps.build.outputs.DEMO }}/borealis_demo.app
          rm -rf ${{ steps.build.outputs.DEMO }}/borealis_demo.app

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.DEMO }}
          path: "${{ steps.build.outputs.DEMO }}"